$max-columns: 12 !default;
$max-gutters: 5 !default;
$breakpoints: ( xs: '(min-width: 0) and (max-width: 599px)', sm: '(min-width: 600px) and (max-width: 959px)', md: '(min-width: 960px) and (max-width: 1280px)', lg: 'only screen and (min-width: 1280px)');
@mixin prefix($property, $value, $vendors: webkit moz ms o) {
  @if $vendors {
    @each $vendor in $vendors {
      #{'-' + $vendor + '-' + $property}: #{$value};
    }
  }
  #{$property}: #{$value};
}

@mixin flex($value) {
  @include prefix(flex, $value, webkit ms);
}

@mixin flex-direction($value) {
  @include prefix(flex-direction, $value, webkit ms);
}

@mixin flex-wrap($value) {
  @include prefix(flex-wrap, $value, webkit);
}

@mixin justify-content($value) {
  @include prefix(justify-content, $value, webkit);
}

@mixin rowMachine($numCol, $columns) {
  position: relative;
  $width: percentage($numCol / $columns);
  @include flex(0 0 $width);
  width: $width;
  max-width: 100%;
  min-height: 1px;
  min-width: 100px; // TODO: REMOVE
  background-color: cornflowerblue; // TODO: REMOVE
  margin: 0;
}

%flexit {
  @include flex-wrap(nowrap);
  display: -webkit-box;
  /* iOS 6-, Safari 3.1-6 */
  display: -moz-box;
  /* Firefox 19- (buggy but mostly works) */
  display: -ms-flexbox;
  /* IE 10 -_- */
  display: -webkit-flex;
  /* MODERN - Chrome */
  display: flex;
  /* MODERN, Spec - Opera 12.1, Firefox 20+ */
  min-height: 100%;
  width: 100%;
  height: 100px; // TODO: REMOVE
  background-color: lightgrey; // TODO: REMOVE
}

%decorators {
  &.wrap {
    @include flex-wrap(wrap);
  }
  &.reverse {
    @include flex-direction(row-reverse);
  }
  &.wrap-reverse {
    @include flex-wrap(wrap-reverse);
  }
  &.center {
    @include justify-content(center);
  }
  &.start {
    @include justify-content(flex-start);
  }
  &.end {
    @include justify-content(flex-end);
  }
  &.between {
    @include justify-content(space-between);
  }
  &.around {
    @include justify-content(space-around);
  }
}

.column {
  @extend %flexit;
  @extend %decorators;
  @include flex-direction(column);
}

.row {
  @extend %flexit;
  @extend %decorators;
  @include flex-direction(row);

  @for $i from 0 through $max-gutters {
    $counter: 0 + '.#{$i}em';
    &.gutter-#{$i} {
      [class*='col-']:nth-child(n) {
        $width: percentage($i / $max-columns);
        @if $i > 0 {
          $width: calc(#{$width} - (#{$counter} * 2));
          @include flex(0 0 $width);
          width: $width;
          margin: #{$counter};
        }
      }
    }
  }
}

// Generate Simple
@for $i from 1 through $max-columns {
  .col-#{$i} {
    @include rowMachine($i, $max-columns);
  }
}

//Generate @media specific
@each $name,
$value in $breakpoints {
  @media #{$value} {
    @for $i from 1 through $max-columns {
      .col-#{$name}-#{$i} {
        @include rowMachine($i, $max-columns);
      }
    }
  }
}